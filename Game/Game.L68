00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 07/03/2023 21:49:09

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Game
00000000                             3  * Written by : Aaron Doyle
00000000                             4  * Date       : 03/03/23
00000000                             5  * Description: A simple endless runner made in assembly
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000  =00000013                 17  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 18  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 19  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            20  
00001000  =00000009                 21  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            22  
00001000                            23  *-----------------------------------------------------------
00001000                            24  * Section       : Charater Setup
00001000                            25  * Description   : Size of Player and Enemy and properties
00001000                            26  * of these characters e.g Starting Positions and Sizes
00001000                            27  *-----------------------------------------------------------
00001000  =00000008                 28  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 29  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            30  
00001000  =00000000                 31  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFF6                 32  PLYR_JUMP_V EQU        -10          ; Player Jump Velocity
00001000  =00000001                 33  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            34  
00001000  =00000001                 35  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 36  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            37    
00001000  =00000001                 38  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 39  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            40  
00001000  =00000008                 41  ENMY_W_INIT EQU         08          ; Enemy initial Width
00001000  =00000008                 42  ENMY_H_INIT EQU         08          ; Enemy initial Height
00001000                            43  
00001000                            44  *-----------------------------------------------------------
00001000                            45  * Section       : Game Stats
00001000                            46  * Description   : Points
00001000                            47  *-----------------------------------------------------------
00001000  =00000000                 48  POINTS      EQU         00          ; Points added
00001000                            49  
00001000                            50  *-----------------------------------------------------------
00001000                            51  * Section       : Keyboard Keys
00001000                            52  * Description   : Spacebar and Escape or two functioning keys
00001000                            53  * Spacebar to JUMP and Escape to Exit Game
00001000                            54  *-----------------------------------------------------------
00001000  =00000020                 55  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 56  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            57  
00001000                            58  *-----------------------------------------------------------
00001000                            59  * Subroutine    : Initialise
00001000                            60  * Description   : Initialise game data into memory such as 
00001000                            61  * sounds and screen size
00001000                            62  *-----------------------------------------------------------
00001000                            63  INITIALISE:
00001000                            64      ; Initialise Sounds
00001000  6100 02AA                 65      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001004  6100 02C4                 66      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
00001008                            67  
00001008                            68      ; Screen Size
00001008  103C 0021                 69      MOVE.B  #TC_SCREEN, D0          ; access screen information
0000100C  7200                      70      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
0000100E  4E4F                      71      TRAP    #15                     ; interpret D0 and D1 for screen size
00001010  33C1 000013E8             72      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
00001016  4841                      73      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001018  33C1 000013E6             74      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
0000101E                            75  
0000101E                            76      ; Place the Player at the center of the screen
0000101E  4281                      77      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001020  3239 000013E6             78      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001026  82FC 0002                 79      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000102A  23C1 000013EE             80      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001030                            81  
00001030  4281                      82      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001032  3239 000013E8             83      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001038  82FC 0002                 84      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000103C  23C1 000013F2             85      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001042                            86  
00001042                            87      ; Initialise Player Score
00001042  4281                      88      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001044  7200                      89      MOVE.L  #00,        D1          ; Init Score
00001046  23C1 000013F6             90      MOVE.L  D1,         PLAYER_SCORE
0000104C                            91      
0000104C                            92      ;Initialise Player Health
0000104C  4281                      93      CLR.L   D1                         ;Clear contents of D1
0000104E  7205                      94      MOVE.L  #5,        D1             ;Player lives set to 5
00001050  23C1 000013FA             95      MOVE.L  D1,         PLAYER_HEALTH
00001056                            96  
00001056                            97      ; Initialise Player Velocity
00001056  4281                      98      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001058  123C 0000                 99      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
0000105C  23C1 000013FE            100      MOVE.L  D1,         PLYR_VELOCITY
00001062                           101  
00001062                           102      ; Initialise Player Gravity
00001062  4281                     103      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001064  7201                     104      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001066  23C1 00001402            105      MOVE.L  D1,         PLYR_GRAVITY
0000106C                           106  
0000106C                           107      ; Initialize Player on Ground
0000106C  23FC 00000001 00001406   108      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001076                           109  
00001076                           110      ; Initial Position for Enemy
00001076  4281                     111      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001078  3239 000013E6            112      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000107E  23C1 0000140A            113      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001084                           114  
00001084  4281                     115      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001086  3239 000013E8            116      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000108C  82FC 0002                117      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001090  23C1 0000140E            118      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001096                           119  
00001096                           120      ; Enable the screen back buffer(see easy 68k help)
00001096  103C 005C                121      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
0000109A  123C 0011                122      MOVE.B  #17,        D1          ; Combine Tasks
0000109E  4E4F                     123      TRAP    #15                     ; Trap (Perform action)
000010A0                           124  
000010A0                           125      ; Clear the screen (see easy 68k help)
000010A0  103C 000B                126      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000010A4  323C FF00                127      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010A8  4E4F                     128      TRAP    #15                     ; Trap (Perform action)
000010AA                           129  
000010AA                           130  *-----------------------------------------------------------
000010AA                           131  * Subroutine    : Gameloop
000010AA                           132  * Description   : This is the main GameLoop. GameLoop is like
000010AA                           133  * a while loop in that it runs forever until interupted
000010AA                           134  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
000010AA                           135  *-----------------------------------------------------------
000010AA                           136  
000010AA                           137  GAMELOOP:
000010AA                           138      ; Main Gameloop
000010AA  6100 0024                139      BSR     INPUT                   ; Check Keyboard Input
000010AE  6100 0076                140      BSR     UPDATE                  ; Update positions and points
000010B2  6100 0164                141      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010B6  6100 0290                142      BSR     CHECK_COLLISIONS        ; Check for Collisions
000010BA  6100 01D4                143      BSR     PLAYER_HEALTH_CHECK     ; Checking if the players health is 0
000010BE  6100 00BA                144      BSR     DRAW                    ; Draw the Scene
000010C2  6100 00D4                145      BSR     FLOOR_DRAW              ; Draw the floor
000010C6  6100 004E                146      BSR     POINTS_LOOP             ; Increments the points
000010CA  6100 01D8                147      BSR     DELAY                   ; Slows the speed of the game down
000010CE  60DA                     148      BRA     GAMELOOP                ; Loop back to GameLoop
000010D0                           149  
000010D0                           150  *-----------------------------------------------------------
000010D0                           151  * Subroutine    : Input
000010D0                           152  * Description   : Process Keyboard Input
000010D0                           153  *-----------------------------------------------------------
000010D0                           154  INPUT:
000010D0                           155      ; Process Input
000010D0  4281                     156      CLR.L   D1                      ; Clear Data Register
000010D2  103C 0013                157      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000010D6  4E4F                     158      TRAP    #15                     ; Trap (Perform action)
000010D8  1401                     159      MOVE.B  D1,         D2          ; Move last key D1 to D2
000010DA  B43C 0000                160      CMP.B   #00,        D2          ; Key is pressed
000010DE  6700 000E                161      BEQ     PROCESS_INPUT           ; Process Key
000010E2  4E4F                     162      TRAP    #15                     ; Trap for Last Key
000010E4                           163      ; Check if key still pressed
000010E4  B23C 00FF                164      CMP.B   #$FF,       D1          ; Is it still pressed
000010E8  6700 0004                165      BEQ     PROCESS_INPUT           ; Process Last Key
000010EC  4E75                     166      RTS                             ; Return to subroutine
000010EE                           167  
000010EE                           168  *-----------------------------------------------------------
000010EE                           169  * Subroutine    : Process Input
000010EE                           170  * Description   : Branch based on keys pressed
000010EE                           171  *-----------------------------------------------------------
000010EE                           172  PROCESS_INPUT:
000010EE  23C2 000013EA            173      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
000010F4  0CB9 0000001B 000013EA   174      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
000010FE  6700 02AA                175      BEQ     EXIT                    ; Exit if Escape
00001102  0CB9 00000020 000013EA   176      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
0000110C  6700 015E                177      BEQ     JUMP                    ; Jump
00001110  6000 0198                178      BRA     IDLE                    ; Or Idle
00001114  4E75                     179      RTS                             ; Return to subroutine
00001116                           180      
00001116                           181  *-----------------------------------------------------------
00001116                           182  * Subroutine    : Points Loop
00001116                           183  * Description   : A loop that increments the points by one each time
00001116                           184  *-----------------------------------------------------------
00001116                           185  POINTS_LOOP:
00001116  7600                     186      MOVE.L      #0, D3
00001118  5283                     187      ADD.L       #1, D3
0000111A  D6B9 000013F6            188      ADD.L       PLAYER_SCORE, D3
00001120  23C3 000013F6            189      MOVE.L      D3, PLAYER_SCORE
00001126                           190     
00001126                           191      
00001126                           192  
00001126                           193  *-----------------------------------------------------------
00001126                           194  * Subroutine    : Update
00001126                           195  * Description   : Main update loop update Player and Enemies
00001126                           196  *-----------------------------------------------------------
00001126                           197  UPDATE:
00001126                           198      ; Update the Players Positon based on Velocity and Gravity
00001126  4281                     199      CLR.L   D1                          ; Clear contents of D1 (XOR is faster)
00001128  2239 000013FE            200      MOVE.L  PLYR_VELOCITY, D1           ; Fetch Player Velocity
0000112E  2439 00001402            201      MOVE.L  PLYR_GRAVITY, D2            ; Fetch Player Gravity
00001134  D282                     202      ADD.L   D2,         D1              ; Add Gravity to Velocity
00001136  23C1 000013FE            203      MOVE.L  D1,         PLYR_VELOCITY   ; Update Player Velocity
0000113C  D2B9 000013F2            204      ADD.L   PLAYER_Y,   D1              ; Add Velocity to Player
00001142  23C1 000013F2            205      MOVE.L  D1,         PLAYER_Y        ; Update Players Y Position 
00001148                           206  
00001148                           207      ; Move the Enemy
00001148  4281                     208      CLR.L   D1                          ; Clear contents of D1 (XOR is faster)
0000114A  4281                     209      CLR.L   D1                          ; Clear the contents of D0
0000114C  2239 0000140A            210      MOVE.L  ENEMY_X,    D1              ; Move the Enemy X Position to D0
00001152  B2BC 00000000            211      CMP.L   #00,        D1
00001158  6F00 0010                212      BLE     RESET_ENEMY_POSITION        ; Reset Enemy if off Screen
0000115C  6000 0004                213      BRA     MOVE_ENEMY                  ; Move the Enemy
00001160                           214  
00001160  4E75                     215      RTS                                 ; Return to subroutine  
00001162                           216  
00001162                           217  *-----------------------------------------------------------
00001162                           218  * Subroutine    : Move Enemy
00001162                           219  * Description   : Move Enemy Right to Left
00001162                           220  *-----------------------------------------------------------
00001162                           221  MOVE_ENEMY:
00001162  51B9 0000140A            222      SUB.L   #8,        ENEMY_X         ; Move enemy by X Value which is 8 
00001168  4E75                     223      RTS
0000116A                           224  
0000116A                           225  *-----------------------------------------------------------    
0000116A                           226  * Subroutine    : Reset Enemy
0000116A                           227  * Description   : Reset Enemy if to passes 0 to Right of Screen
0000116A                           228  *-----------------------------------------------------------
0000116A                           229  RESET_ENEMY_POSITION:
0000116A  4281                     230      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000116C  3239 000013E6            231      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001172  23C1 0000140A            232      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001178  4E75                     233      RTS
0000117A                           234  
0000117A                           235  *-----------------------------------------------------------
0000117A                           236  * Subroutine    : Draw
0000117A                           237  * Description   : Draw Screen
0000117A                           238  *-----------------------------------------------------------
0000117A                           239  DRAW: 
0000117A                           240      ; Enable back buffer
0000117A  103C 005E                241      MOVE.B  #94,        D0
0000117E  4E4F                     242      TRAP    #15
00001180                           243  
00001180                           244      ; Clear the screen
00001180  103C 000B                245      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001184  323C FF00                246      MOVE.W  #$FF00,     D1          ; Clear contents
00001188  4E4F                     247      TRAP    #15                     ; Trap (Perform action)
0000118A                           248  
0000118A  6100 0032                249      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
0000118E  6100 0158                250      BSR     DRAW_PLAYER             ; Draw Player
00001192  6100 0184                251      BSR     DRAW_ENEMY              ; Draw Enemy
00001196  4E75                     252      RTS                             ; Return to subroutine
00001198                           253      
00001198                           254      
00001198                           255  *-----------------------------------------------------------
00001198                           256  * Subroutine    : DRAW FLOOR
00001198                           257  * Description   : Draws the floor line for the player to jump on
00001198                           258  *-----------------------------------------------------------
00001198                           259  FLOOR_DRAW:
00001198                           260  
00001198  4281                     261      CLR.L   D1
0000119A  103C 0050                262      MOVE.B  #80, D0              
0000119E  223C 00A020F0            263      MOVE.L  #$00A020F0, D1      ; Setting the colour of the line to purple using hex codes
000011A4  4E4F                     264      TRAP    #15
000011A6                           265      
000011A6  4281                     266      CLR.L   D1
000011A8  103C 0054                267      MOVE.B  #84, D0         ; Trap code to draw a line
000011AC  323C 000A                268      MOVE.W  #10, D1         ; Setting the start X value
000011B0  343C 00FA                269      MOVE.W  #250, D2        ; Setting the end X value
000011B4  363C 13E6                270      MOVE.W  #SCREEN_W, D3   ; Setting the length of the line
000011B8  383C 00FA                271      MOVE.W  #250, D4        ; Setting the Y value of the line
000011BC  4E4F                     272      TRAP    #15
000011BE                           273      
000011BE                           274      
000011BE                           275      
000011BE                           276      
000011BE                           277  *-----------------------------------------------------------
000011BE                           278  * Subroutine    : Draw Player Data
000011BE                           279  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000011BE                           280  *-----------------------------------------------------------
000011BE                           281  DRAW_PLYR_DATA:
000011BE  4281                     282      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011C0                           283  
000011C0                           284      ; Player Score Message
000011C0  103C 000B                285      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011C4  323C 0201                286      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000011C8  4E4F                     287      TRAP    #15                     ; Trap (Perform action)
000011CA  43F9 000013CA            288      LEA     SCORE_MSG,  A1          ; Score Message
000011D0  303C 000D                289      MOVE    #13,        D0          ; No Line feed
000011D4  4E4F                     290      TRAP    #15                     ; Trap (Perform action)
000011D6                           291  
000011D6                           292      ; Player Score Value
000011D6  103C 000B                293      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011DA  323C 0A01                294      MOVE.W  #$0A01,     D1          ; Col 10, Row 01
000011DE  4E4F                     295      TRAP    #15                     ; Trap (Perform action)
000011E0  103C 0003                296      MOVE.B  #03,        D0          ; Display number at D1.L
000011E4  2239 000013F6            297      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000011EA  4E4F                     298      TRAP    #15                     ; Trap (Perform action)
000011EC                           299      
000011EC                           300      ; Player Health Message
000011EC  103C 000B                301      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011F0  323C 0202                302      MOVE.W  #$0202,     D1          ; Col 02, Row 02
000011F4  4E4F                     303      TRAP    #15                     ; Trap (Perform action)
000011F6  43F9 000013D3            304      LEA     HEALTH_MSG, A1          ; Health Message
000011FC  303C 000D                305      MOVE    #13,        D0          ; No Line feed
00001200  4E4F                     306      TRAP    #15                     ; Trap (Perform action)
00001202                           307      
00001202                           308      ; Player Health
00001202  103C 000B                309      MOVE.B  #TC_CURSR_P, D0         ; Set Cursor Position
00001206  323C 0A02                310      MOVE.W  #$0A02,     D1          ; Col 10, Row 02
0000120A  4E4F                     311      TRAP    #15                     ; Trap (Perform action)
0000120C  103C 0003                312      MOVE.B  #03,        D0          ; Display number at D1.L
00001210  2239 000013FA            313      MOVE.L  PLAYER_HEALTH,   D1     ; Move X to D1.L
00001216  4E4F                     314      TRAP    #15                     ; Trap (Perform action)
00001218                           315      
00001218                           316    
00001218                           317  *-----------------------------------------------------------
00001218                           318  * Subroutine    : Player is on Ground
00001218                           319  * Description   : Check if the Player is on or off Ground
00001218                           320  *-----------------------------------------------------------
00001218                           321  IS_PLAYER_ON_GND:
00001218                           322      ; Check if Player is on Ground
00001218  4281                     323      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000121A  4282                     324      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
0000121C  3239 000013E8            325      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001222  82FC 0002                326      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001226  2439 000013F2            327      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
0000122C  B441                     328      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
0000122E  6C00 0008                329      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00001232  6D00 002C                330      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00001236  4E75                     331      RTS                             ; Return to subroutine
00001238                           332  
00001238                           333  *-----------------------------------------------------------
00001238                           334  * Subroutine    : On Ground
00001238                           335  * Description   : Set the Player On Ground
00001238                           336  *-----------------------------------------------------------
00001238                           337  SET_ON_GROUND:
00001238  4281                     338      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000123A  3239 000013E8            339      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001240  82FC 0002                340      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001244  23C1 000013F2            341      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
0000124A  4281                     342      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000124C  7200                     343      MOVE.L  #00,        D1          ; Player Velocity
0000124E  23C1 000013FE            344      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
00001254  23FC 00000001 00001406   345      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
0000125E  4E75                     346      RTS
00001260                           347  
00001260                           348  *-----------------------------------------------------------
00001260                           349  * Subroutine    : Off Ground
00001260                           350  * Description   : Set the Player Off Ground
00001260                           351  *-----------------------------------------------------------
00001260                           352  SET_OFF_GROUND:
00001260  23FC 00000000 00001406   353      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
0000126A  4E75                     354      RTS                             ; Return to subroutine
0000126C                           355  *-----------------------------------------------------------
0000126C                           356  * Subroutine    : Jump
0000126C                           357  * Description   : Perform a Jump
0000126C                           358  *-----------------------------------------------------------
0000126C                           359  JUMP:
0000126C  0CB9 00000001 00001406   360      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
00001276  6700 0006                361      BEQ     PERFORM_JUMP            ; Do Jump
0000127A  6000 0012                362      BRA     JUMP_DONE               ;
0000127E                           363  PERFORM_JUMP:
0000127E  6100 003E                364      BSR     PLAY_JUMP               ; Play jump sound
00001282  23FC FFFFFFF6 000013FE   365      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
0000128C  4E75                     366      RTS                             ; Return to subroutine
0000128E                           367  JUMP_DONE:
0000128E  4E75                     368      RTS                             ; Return to subroutine
00001290                           369      
00001290                           370  *-----------------------------------------------------------
00001290                           371  * Subroutine    : Player Health Check
00001290                           372  * Description   : Checking to see if the player has died
00001290                           373  *-----------------------------------------------------------    
00001290                           374  PLAYER_HEALTH_CHECK:
00001290  4241                     375      CLR         D1
00001292  2239 000013FA            376      MOVE.L      PLAYER_HEALTH, D1
00001298  B2BC 00000000            377      CMP.L       #0, D1
0000129E  6F00 010A                378      BLE         EXIT
000012A2  4E75                     379      RTS
000012A4                           380      
000012A4                           381      
000012A4                           382  *-----------------------------------------------------------
000012A4                           383  * Subroutine    : Delay
000012A4                           384  * Description   : Used to slow down the in game speed by using trap codes
000012A4                           385  *-----------------------------------------------------------
000012A4                           386  DELAY:
000012A4  7201                     387      MOVE.L      #1, D1
000012A6  7017                     388      MOVEQ       #23, D0             ;This trap code creates a delay in the code 
000012A8  4E4F                     389      TRAP        #15
000012AA                           390  
000012AA                           391  
000012AA                           392  *-----------------------------------------------------------
000012AA                           393  * Subroutine    : Idle
000012AA                           394  * Description   : Perform a Idle
000012AA                           395  *----------------------------------------------------------- 
000012AA                           396  IDLE:
000012AA                           397  
000012AA  4E75                     398      RTS                             ; Return to subroutine
000012AC                           399  
000012AC                           400  *-----------------------------------------------------------
000012AC                           401  * Subroutines   : Sound Load and Play
000012AC                           402  * Description   : Initialise game sounds into memory 
000012AC                           403  * Current Sounds are JUMP and Opps for Collision
000012AC                           404  *-----------------------------------------------------------
000012AC                           405  JUMP_LOAD:
000012AC  43F9 00001412            406      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
000012B2  323C 0001                407      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
000012B6  303C 0047                408      MOVE    #71,        D0          ; Load into memory
000012BA  4E4F                     409      TRAP    #15                     ; Trap (Perform action)
000012BC  4E75                     410      RTS                             ; Return to subroutine
000012BE                           411  
000012BE                           412  PLAY_JUMP:
000012BE  323C 0001                413      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000012C2  303C 0048                414      MOVE    #72,        D0          ; Play Sound
000012C6  4E4F                     415      TRAP    #15                     ; Trap (Perform action)
000012C8  4E75                     416      RTS                             ; Return to subroutine
000012CA                           417  
000012CA                           418  OPPS_LOAD:
000012CA  43F9 0000141B            419      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
000012D0  323C 0002                420      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
000012D4  303C 0047                421      MOVE    #71,        D0          ; Load into memory
000012D8  4E4F                     422      TRAP    #15                     ; Trap (Perform action)
000012DA  4E75                     423      RTS                             ; Return to subroutine
000012DC                           424  
000012DC                           425  PLAY_OPPS:
000012DC  323C 0002                426      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
000012E0  303C 0048                427      MOVE    #72,        D0          ; Play Sound
000012E4  4E4F                     428      TRAP    #15                     ; Trap (Perform action)
000012E6  4E75                     429      RTS                             ; Return to subroutine
000012E8                           430  
000012E8                           431  *-----------------------------------------------------------
000012E8                           432  * Subroutine    : Draw Player
000012E8                           433  * Description   : Draw Player Square
000012E8                           434  *-----------------------------------------------------------
000012E8                           435  DRAW_PLAYER:
000012E8                           436      ; Set Pixel Colors
000012E8  223C 00FFFFFF            437      MOVE.L  #WHITE,     D1          ; Set Background color
000012EE  103C 0050                438      MOVE.B  #80,        D0          ; Task for Background Color
000012F2  4E4F                     439      TRAP    #15                     ; Trap (Perform action)
000012F4                           440  
000012F4                           441      ; Set X, Y, Width and Height
000012F4  2239 000013EE            442      MOVE.L  PLAYER_X,   D1          ; X
000012FA  2439 000013F2            443      MOVE.L  PLAYER_Y,   D2          ; Y
00001300  2639 000013EE            444      MOVE.L  PLAYER_X,   D3
00001306  5083                     445      ADD.L   #PLYR_W_INIT,   D3      ; Width
00001308  2839 000013F2            446      MOVE.L  PLAYER_Y,   D4 
0000130E  5084                     447      ADD.L   #PLYR_H_INIT,   D4      ; Height
00001310                           448      
00001310                           449      ; Draw Player
00001310  103C 0057                450      MOVE.B  #87,        D0          ; Draw Player
00001314  4E4F                     451      TRAP    #15                     ; Trap (Perform action)
00001316  4E75                     452      RTS                             ; Return to subroutine
00001318                           453  
00001318                           454  *-----------------------------------------------------------
00001318                           455  * Subroutine    : Draw Enemy
00001318                           456  * Description   : Draw Enemy Square
00001318                           457  *-----------------------------------------------------------
00001318                           458  DRAW_ENEMY:
00001318                           459      ; Set Pixel Colors
00001318  223C 000000FF            460      MOVE.L  #RED,       D1          ; Set Background color
0000131E  103C 0050                461      MOVE.B  #80,        D0          ; Task for Background Color
00001322  4E4F                     462      TRAP    #15                     ; Trap (Perform action)
00001324                           463  
00001324                           464      ; Set X, Y, Width and Height
00001324  2239 0000140A            465      MOVE.L  ENEMY_X,    D1          ; X
0000132A  2439 0000140E            466      MOVE.L  ENEMY_Y,    D2          ; Y
00001330  2639 0000140A            467      MOVE.L  ENEMY_X,    D3
00001336  5083                     468      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001338  2839 0000140E            469      MOVE.L  ENEMY_Y,    D4 
0000133E  5084                     470      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001340                           471      
00001340                           472      ; Draw Enemy    
00001340  103C 0057                473      MOVE.B  #87,        D0          ; Draw Enemy
00001344  4E4F                     474      TRAP    #15                     ; Trap (Perform action)
00001346  4E75                     475      RTS                             ; Return to subroutine
00001348                           476  
00001348                           477  *-----------------------------------------------------------
00001348                           478  * Subroutine    : Collision Check
00001348                           479  * Description   : Axis-Aligned Bounding Box Collision Detection
00001348                           480  * Algorithm checks for overlap on the 4 sides of the Player and 
00001348                           481  * Enemy rectangles
00001348                           482  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001348                           483  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001348                           484  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001348                           485  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001348                           486  *-----------------------------------------------------------
00001348                           487  CHECK_COLLISIONS:
00001348  4281                     488      CLR.L   D1                      ; Clear D1
0000134A  4282                     489      CLR.L   D2                      ; Clear D2
0000134C                           490  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
0000134C  2239 000013EE            491      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001352  2439 0000140A            492      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001358  D4B8 0008                493      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000135C  B481                     494      CMP.L   D1,         D2          ; Do the Overlap ?
0000135E  6F00 0004                495      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00001362  4E75                     496      RTS
00001364                           497  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001364  D2B8 0008                498      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001368  2439 0000140A            499      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
0000136E  B481                     500      CMP.L   D1,         D2          ; Do they OverLap ?
00001370  6C00 0004                501      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00001374  4E75                     502      RTS   
00001376                           503  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
00001376  2239 000013F2            504      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000137C  2439 0000140E            505      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00001382  D4B8 0008                506      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001386  B481                     507      CMP.L   D1,         D2          ; Do they Overlap ?
00001388  6F00 0004                508      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
0000138C  4E75                     509      RTS 
0000138E                           510  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
0000138E  D2B8 0008                511      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001392  2439 0000140E            512      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00001398  B481                     513      CMP.L   D1,         D2          ; Do they OverLap ?
0000139A  6C00 0004                514      BGE     COLLISION               ; Collision !
0000139E  4E75                     515      RTS
000013A0                           516  
000013A0                           517  COLLISION:
000013A0  6100 FF3A                518      BSR     PLAY_OPPS               ; Play Opps Wav
000013A4  51C8 0054                519      DBF     D0, PLAYER_HEALTH    
000013A8  4E75                     520      RTS                             ; Return to subroutine
000013AA                           521  
000013AA                           522  *-----------------------------------------------------------
000013AA                           523  * Subroutine    : EXIT
000013AA                           524  * Description   : Exit message and End Game
000013AA                           525  *-----------------------------------------------------------
000013AA                           526  EXIT:
000013AA                           527      ; Show if Exiting is Running
000013AA  103C 000B                528      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013AE  323C 4004                529      MOVE.W  #$4004,     D1          ; Col 40, Row 1
000013B2  4E4F                     530      TRAP    #15                     ; Trap (Perform action)
000013B4  43F9 000013DA            531      LEA     EXIT_MSG,   A1          ; Exit
000013BA  303C 000D                532      MOVE    #13,        D0          ; No Line feed
000013BE  4E4F                     533      TRAP    #15                     ; Trap (Perform action)
000013C0  103C 0009                534      MOVE.B  #TC_EXIT,   D0          ; Exit Code
000013C4  4E4F                     535      TRAP    #15                     ; Trap (Perform action)
000013C6  FFFF FFFF                536      SIMHALT
000013CA                           537  
000013CA                           538  *-----------------------------------------------------------
000013CA                           539  * Section       : Messages
000013CA                           540  * Description   : Messages to Print on Console, names should be
000013CA                           541  * self documenting
000013CA                           542  *-----------------------------------------------------------
000013CA= 53 63 6F 72 65 20 ...    543  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
000013D3                           544  
000013D3= 4C 69 76 65 73 3A 00     545  HEALTH_MSG      DC.B    'Lives:', 0        ; Health Position Message
000013DA                           546  
000013DA= 45 78 69 74 69 6E ...    547  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
000013E6                           548  
000013E6                           549  *-----------------------------------------------------------
000013E6                           550  * Section       : Graphic Colors
000013E6                           551  * Description   : Screen Pixel Color
000013E6                           552  *-----------------------------------------------------------
000013E6  =00FFFFFF                553  WHITE           EQU     $00FFFFFF
000013E6  =000000FF                554  RED             EQU     $000000FF
000013E6                           555  
000013E6                           556  *-----------------------------------------------------------
000013E6                           557  * Section       : Screen Size
000013E6                           558  * Description   : Screen Width and Height
000013E6                           559  *-----------------------------------------------------------
000013E6                           560  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000013E8                           561  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000013EA                           562  
000013EA                           563  *-----------------------------------------------------------
000013EA                           564  * Section       : Keyboard Input
000013EA                           565  * Description   : Used for storing Keypresses
000013EA                           566  *-----------------------------------------------------------
000013EA                           567  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
000013EE                           568  
000013EE                           569  *-----------------------------------------------------------
000013EE                           570  * Section       : Character Positions
000013EE                           571  * Description   : Player and Enemy Position Memory Locations
000013EE                           572  *-----------------------------------------------------------
000013EE                           573  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
000013F2                           574  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000013F6                           575  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000013FA                           576  PLAYER_HEALTH   DS.L    01  ; Reserve space for Player Health
000013FE                           577  
000013FE                           578  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00001402                           579  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00001406                           580  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
0000140A                           581  
0000140A                           582  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
0000140E                           583  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001412                           584  
00001412                           585  *-----------------------------------------------------------
00001412                           586  * Section       : Sounds
00001412                           587  * Description   : Sound files, which are then loaded and given
00001412                           588  * an address in memory, they take a longtime to process and play
00001412                           589  * so keep the files small. Used https://voicemaker.in/ to 
00001412                           590  * generate and Audacity to convert MP3 to WAV
00001412                           591  *-----------------------------------------------------------
00001412= 6A 75 6D 70 2E 77 ...    592  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
0000141B= 6F 70 70 73 2E 77 ...    593  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001424                           594  
00001424                           595      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHECK_COLLISIONS    1348
COLLISION           13A0
CURRENT_KEY         13EA
DELAY               12A4
DRAW                117A
DRAW_ENEMY          1318
DRAW_PLAYER         12E8
DRAW_PLYR_DATA      11BE
ENEMY_X             140A
ENEMY_Y             140E
ENMY_H_INIT         8
ENMY_W_INIT         8
ESCAPE              1B
EXIT                13AA
EXIT_MSG            13DA
FLOOR_DRAW          1198
GAMELOOP            10AA
GND_FALSE           0
GND_TRUE            1
HEALTH_MSG          13D3
IDLE                12AA
INITIALISE          1000
INPUT               10D0
IS_PLAYER_ON_GND    1218
JMP_INDEX           1
JUMP                126C
JUMP_DONE           128E
JUMP_LOAD           12AC
JUMP_WAV            1412
MOVE_ENEMY          1162
OPPS_INDEX          2
OPPS_LOAD           12CA
OPPS_WAV            141B
PERFORM_JUMP        127E
PLAYER_HEALTH       13FA
PLAYER_HEALTH_CHECK  1290
PLAYER_SCORE        13F6
PLAYER_X            13EE
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  134C
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1364
PLAYER_Y            13F2
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  1376
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  138E
PLAY_JUMP           12BE
PLAY_OPPS           12DC
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        1402
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFF6
PLYR_ON_GND         1406
PLYR_VELOCITY       13FE
PLYR_W_INIT         8
POINTS              0
POINTS_LOOP         1116
PROCESS_INPUT       10EE
RED                 FF
RESET_ENEMY_POSITION  116A
SCORE_MSG           13CA
SCREEN_H            13E8
SCREEN_W            13E6
SET_OFF_GROUND      1260
SET_ON_GROUND       1238
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              1126
WHITE               FFFFFF
